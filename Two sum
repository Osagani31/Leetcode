//Q1-Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> numMap; // number -> index

        for (int i = 0; i < nums.size(); ++i) {
            int complement = target - nums[i];

            // Check if complement exists in map
            if (numMap.find(complement) != numMap.end()) {
                return {numMap[complement], i};
            }

            // Store the current number and its index
            numMap[nums[i]] = i;
        }

        // If no solution found (should not happen based on constraints)
        return {};
    }
};
